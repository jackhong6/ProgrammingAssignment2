pollutantmean("speecdata","sulfate",1:10)
pollutantmean("specdata","sulfate",1:10)
id <- 1:10
id.csv
paste(id,".csv", collapse="")
?paste
?mean
read.csv?
?read.csv
?read.csv
getwd()
setwd(..)
?setwd
setwd("~/OneDrive/DataScience/R_programming")
file_path <- paste("specdata/","001.csv",sep="")
read.csv(file_path)
data <- read.csv(file_path)
View(data)
id <- 1:10
paste("test/",id,".csv",sep="")
read.csv("specdata/1.csv")
?paste
id <- 1:300
get_file_paths <- function(directory,id) {
file_name <- if (id < 10) {
paste("00",id,sep="")
} else if (id < 100) {
paste("0",id,".csv", sep="")
} else {
paste(id,".csv",sep="")
}
}
get_file_paths("test", id)
?vector
get_file_paths <- function(directory,id) {
file_names <- vector("character")
for (i in id){
file_name <- if (i < 10) {
paste("00",i,sep="")
} else if (i < 100) {
paste("0",i,".csv", sep="")
} else {
paste(i,".csv",sep="")
}
c(file_names,file_name)
}
}
get_file_paths("test",id)
get_file_paths("test",id)
get_file_paths <- function(directory,id) {
file_names <- vector("character")
for (i in id){
file_name <- if (i < 10) {
paste("00",i,sep="")
} else if (i < 100) {
paste("0",i,".csv", sep="")
} else {
paste(i,".csv",sep="")
}
c(file_names,file_name)
}
file_names
}
file_names <- get_file_names("test",id)
files <- get_file_paths("test",id)
get_file_paths <- function(directory,id) {
file_paths <- vector("character")
for (i in id){
file_name <- if (i < 10) {
paste("00",i,sep="")
} else if (i < 100) {
paste("0",i,".csv", sep="")
} else {
paste(i,".csv",sep="")
}
file_path <- paste(directory,"/",filename,sep="")
c(file_paths,file_path)
}
file_paths
}
files <- get_file_paths("test",id)
get_file_paths <- function(directory,id) {
file_paths <- vector("character")
for (i in id){
file_name <- if (i < 10) {
paste("00",i,sep="")
} else if (i < 100) {
paste("0",i,".csv", sep="")
} else {
paste(i,".csv",sep="")
}
file_path <- paste(directory,"/",file_name,sep="")
c(file_paths,file_path)
}
file_paths
}
files <- get_file_paths("test",id)
get_file_paths <- function(directory,id) {
file_paths <- vector("character")
for (i in id){
file_name <- if (i < 10) {
paste("00",i,sep="")
} else if (i < 100) {
paste("0",i,".csv", sep="")
} else {
paste(i,".csv",sep="")
}
file_path <- paste(directory,"/",file_name,sep="")
file_paths <- c(file_paths,file_path)
}
file_paths
}
files <- get_file_paths("test",id)
files
rm(list=ls())
?paste
get_file_paths <- function(directory,id) {
file_paths <- vector("character")
for (i in id){
file_name <- if (i < 10) {
paste("00",i,".csv",sep="")
} else if (i < 100) {
paste("0",i,".csv", sep="")
} else {
paste(i,".csv",sep="")
}
file_path <- paste(directory,"/",file_name,sep="")
file_paths <- c(file_paths,file_path)
}
file_paths
}
id <- 1:200
get_file_paths("test",id)
files <- get_file_paths("test",id)
class(files)
?data.frame
data <- data.frame()
View(data)
data <- data.frame(Date=as.Date(character()),
sulfate = numeric(),
nitrate = numeric(),
ID = numeric())
View(data)
rm(list=ls())
source(pollutantmean.R)
dir()
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
data
data
?data
rm(list=ls())
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
df
df <- data.frame(Date=as.Date(character()),
sulfate = numeric(),
nitrate = numeric(),
ID = numeric())
View(df)
View(df)
get_file_paths("specdata",1:10)
files <- get_file_paths("specdata",1:10)
rbind(df,read.csv("specdata/001.csv"))
df <- rbind(df,read.csv("specdata/001.csv"))
View(df)
rm(list=ls())
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
df
file_paths
rm(list=ls())
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
files_paths <- get_file_paths("specdata",1:10)
files_paths
for (file in files_paths) {file}
for (file in files_paths) {print(file)}
for (file in files_paths) {read.csv(file)}
df <- data.frame(Date=as.Date(character()),
sulfate = numeric(),
nitrate = numeric(),
ID = numeric())
for (file in files_paths) {
temp <- read.csv(file)
df <- rbind(df,temp)
}
View(df)
df
df$sulfate
sulfate <- df$sulfate
pollutant <- "sulfate"
df$pollutant
rm(list=ls())
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
rm(list=ls())
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
df <- data.frame(Date=as.Date(character()),
sulfate = numeric(),
nitrate = numeric(),
ID = numeric())
names(df)
file_paths <- get_file_paths("specdata",1:10)
for (file in file_paths) {
temp <- read.csv(file)
df <- rbind(df,temp)
}
df
p <- "sulfate"
df[p]
mean(df[p],rm.na=TRUE)
mean(df[[p],rm.na=TRUE)
mean(df[[p]],rm.na=TRUE)
?mean
class(df[[p]])
df[[p]]
mean(df[[p]])
mean(df[[p]],rm.na=TRUE)
mean(df[[p]],rm.na=FALSE)
mean(df[[p]],na.rm=TRUE)
class(df[p])
rm(list=ls())
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","nitrate",23)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
submit()
2
submit()
submit()
submit()
library(swirl)
rm(list=ls())
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
as.numeric(TRUE)
as.numeric(F)
my_df <- data.frame(id=numeric(),nobs=numeric())
my_df$id <- id
my_df <- data.frame(id=numeric(),nobs=numeric())
View(my_df)
my_df$id <- 2:30
?sum
?complete.cases
rm(list=ls())
source("complete.R")
complete("specdata",1)
rm(list=ls())
source("complete.R")
complete("specdata",1)
complete("specdata",1)
rm(list=ls())
source("complete.R")
complete("specdata",1)
complete("specdata",30:25)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
librar(swirl)
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA).
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,mymatrix2)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp","rating", "test")
cnames <- c("patient", "age", "weight", "bp","rating", "test")
colnames(my_data) <- cnames
my_data
?cor
?summary
source("complete.R")
completed <- complete("specdata")
View(completed)
?seq_along
class(completed)
above_threshold <- completed[completed$nobs > threshold]
threshold <- 1
above_threshold <- completed[completed$nobs > threshold]
above_threshold <- completed[completed$nobs > threshold,]
View(above_threshold)
attributes(data.frames)
attributes(above_threshold)
correlations <- vector("numeric")
?cor
monitors <- get_file_paths("specdata",above_threshold$id)
class(monitors)
for (i in seq_along(above_threshold$id)) {
print(i)
}
for (i in seq_along(above_threshold)) {
print(i)
}
rm(list=ls())
source("corr.R")
cr <- corr("specdata", 150)
rm(list=ls())
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
?is.complete
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata",5000)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
library(swirl)
swirl()
T == T
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
?sr
?str
?gl
?interaction
f1 <- g1(2,5)
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1,f2)
?recover
library(datasets)
data(iris)
iris
?tapply
factor <- gl(3,50)
tapply(iris$Sepal.Length, factor, mean)
mean(iris$Sepal.Length[100:150])
mean(iris$Sepal.Length[101:150])
iris[,1:4]
?apply
colMeans(iris)
apply(iris[,1:4],2,mean)
?colMeans
debug(colMeans(iris))
traceback()
.colMeans(iris)
class(iris)
colMeans(iris,4)
?apply
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
?tapply
as.factor(mtcars$mpg)
?with
with(mtcars, tapply(mpg, cyl, mean))
means_by_cyl <- with(mtcars, tapply(mpg,cyl,mean))
class(means_by_cyl)
?array
means_by_cyl$4
means_by_cyl[4,1]
?dims
??dims
names(means_by_cyl)
means_by_cyl[["4"]]
abs(means_by_cyl[["4"]]-means_by_cyl[["8"]])
debug(ls)
ls()
break
library(datasets)
data(iris)
iris
?tapply
factor <- gl(3,50)
names(factor) <- c("setosa","versicolor","virginica")
tapply(iris,factor)
factor
?gl
f <- gl(3,50, labels = c("setosa","versicolor","virginica"))
rm(factor)
tapply(iris,f)
length(f)
tapply(iris$Sepal.Length,f)
tapply(iris$Sepal.Length,f,mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
View(mtcars)
mean_hp_cyl <- with(mtcars, tapply(hp, cyl, mean))
mean_hp_cyl
abs(mean_hp_cyl[["4"]]-mean_hp_cyl[["8"]])
rm(list=ls())
?debug
undebug(ls)
rm(list=ls())
?solve
?mean
getwd()
dir()
setwd('ProgrammingAssignment2')
dir()
library("cachematrix.R")
load("cachematrix.R")
source("cachematrix.R")
?<<-
?matrix
m <- matrix(1:9,nrows=3,ncol=3)
m <- matrix(1:9,nrow=3,ncol=3)
makeCacheMatrix(m)
cache_matrix <- makeCacheMatrix(m)
cachSolve(cache_matrix)
cacheSolve(cache_matrix)
cache_matrix <- matrix(1:4,nrow=2,ncol=2)
rm(m)
cache_matrix <- makeCacheMatrix(cache_matrix)
cacheSolve(cache_matrix)
cacheSolve(cache_matrix)
cache_matrix$get()
cache_matrix$get()
m <- cache_matrix$get()
rm(m)
cache_matrix$set(matrix(1:4,nrow=2,ncol=2))
cacheSolve(cache_matrix)
cacheSolve(cache_matrix)
